{
  "_from": "read-excel-file",
  "_id": "read-excel-file@4.0.2",
  "_inBundle": false,
  "_integrity": "sha512-UIaJXCpL/T7gbV6EmtNlUtWEqjJcdcA3odpsy5t/vHB11DjZjepa25BF3DoqPyQwwLcei5+6CWKc0LaY3qGmNw==",
  "_location": "/read-excel-file",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "read-excel-file",
    "fetchSpec": "latest",
    "name": "read-excel-file",
    "raw": "read-excel-file",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/read-excel-file/-/read-excel-file-4.0.2.tgz",
  "_shasum": "ee7253b49c53b8d7a5da46d87ef12df3425f7f26",
  "_shrinkwrap": null,
  "_spec": "read-excel-file",
  "_where": "/var/www/html/NodeWebHook",
  "author": {
    "email": "purecatamphetamine@gmail.com",
    "name": "catamphetamine"
  },
  "betterScripts": {
    "browser-build": {
      "command": "webpack --mode production --progress --colors",
      "env": {
        "WEBPACK_ENV": "build"
      }
    },
    "build-commonjs-modules": {
      "command": "babel ./source --out-dir ./commonjs --source-maps",
      "env": {
        "BABEL_ENV": "commonjs"
      }
    },
    "build-es6-modules": {
      "command": "babel ./source --out-dir ./modules --source-maps",
      "env": {
        "BABEL_ENV": "es6"
      }
    }
  },
  "bugs": {
    "url": "https://github.com/catamphetamine/read-excel-file/issues"
  },
  "bundleDependencies": false,
  "contributors": [
    {
      "name": "Trevor Dixon",
      "email": "trevordixon@gmail.com"
    },
    {
      "name": "Steve Tarver",
      "email": "steve.tarver@gmail.com"
    },
    {
      "name": "Jake Scott",
      "email": "scott.iroh@gmail.com"
    },
    {
      "name": "Fabian Tollenaar",
      "email": "fabian@starting-point.nl"
    }
  ],
  "dependencies": {
    "jszip": "^3.1.5",
    "unzipper": "^0.9.15",
    "xmldom": "^0.1.27",
    "xpath": "0.0.27"
  },
  "deprecated": false,
  "description": "Read `*.xlsx` files in a browser or Node.js. Parse to JSON with a strict schema.",
  "devDependencies": {
    "babel-cli": "^6.26.0",
    "babel-core": "^6.26.0",
    "babel-loader": "^7.1.4",
    "babel-plugin-transform-object-rest-spread": "^6.26.0",
    "babel-plugin-transform-runtime": "^6.23.0",
    "babel-preset-env": "^1.6.1",
    "babel-runtime": "^6.26.0",
    "better-npm-run": "^0.1.0",
    "chai": "^4.1.2",
    "mocha": "^6.2.0",
    "npm-run-all": "^4.1.2",
    "webpack": "^4.1.1",
    "webpack-cli": "^2.0.12"
  },
  "homepage": "https://github.com/catamphetamine/read-excel-file#readme",
  "keywords": [
    "browser",
    "excel",
    "json",
    "xlsx"
  ],
  "license": "MIT",
  "main": "index.commonjs.js",
  "module": "index.js",
  "name": "read-excel-file",
  "optionalDependencies": {},
  "readme": "# `read-excel-file`\r\n\r\nRead `*.xlsx` files in a browser or Node.js. Parse to JSON with a strict schema.\r\n\r\n[Demo](https://catamphetamine.github.io/read-excel-file/)\r\n\r\n## Install\r\n\r\n```js\r\nnpm install read-excel-file --save\r\n```\r\n\r\n## Browser\r\n\r\n```html\r\n<input type=\"file\" id=\"input\" />\r\n```\r\n\r\n```js\r\nimport readXlsxFile from 'read-excel-file'\r\n\r\nconst input = document.getElementById('input')\r\n\r\ninput.addEventListener('change', () => {\r\n  readXlsxFile(input.files[0]).then((rows) => {\r\n    // `rows` is an array of rows\r\n    // each row being an array of cells.\r\n  })\r\n})\r\n```\r\n\r\n## Node.js\r\n\r\n```js\r\nconst readXlsxFile = require('read-excel-file/node');\r\n\r\n// File path.\r\nreadXlsxFile('/path/to/file').then((rows) => {\r\n  // `rows` is an array of rows\r\n  // each row being an array of cells.\r\n})\r\n\r\n// Readable Stream.\r\nreadXlsxFile(fs.createReadStream('/path/to/file')).then((rows) => {\r\n  ...\r\n})\r\n```\r\n\r\n## Dates\r\n\r\nXLSX format has no dedicated \"date\" type so dates are stored internally as simply numbers along with a \"format\" (e.g. `\"MM/DD/YY\"`). When using `readXlsx()` with `schema` parameter all dates get parsed correctly in any case. But if using `readXlsx()` without `schema` parameter (to get \"raw\" data) then this library attempts to guess whether a cell value is a date or not by examining the cell \"format\" (e.g. `\"MM/DD/YY\"`), so in most cases dates are detected and parsed automatically. For exotic cases one can pass an explicit `dateFormat` parameter (e.g. `\"MM/DD/YY\"`) to instruct the library to parse numbers with such \"format\" as dates.\r\n\r\n## JSON\r\n\r\nTo convert rows to JSON pass `schema` option to `readXlsxFile()`. It will return `{ rows, errors }` object instead of just `rows`.\r\n\r\n```js\r\n// An example *.xlsx document:\r\n// -----------------------------------------------------------------------------\r\n// | START DATE | NUMBER OF STUDENTS | IS FREE | COURSE TITLE |    CONTACT     |\r\n// -----------------------------------------------------------------------------\r\n// | 03/24/2018 |         123        |   true  |  Chemistry   | (123) 456-7890 |\r\n// -----------------------------------------------------------------------------\r\n\r\nconst schema = {\r\n  'START DATE': {\r\n    prop: 'date',\r\n    type: Date\r\n    // Excel stores dates as integers.\r\n    // E.g. '24/03/2018' === 43183.\r\n    // Such dates are parsed to UTC+0 timezone with time 12:00 .\r\n  },\r\n  'NUMBER OF STUDENTS': {\r\n    prop: 'numberOfStudents',\r\n    type: Number,\r\n    required: true\r\n  },\r\n  'COURSE': {\r\n    prop: 'course',\r\n    type: {\r\n      'IS FREE': {\r\n        prop: 'isFree',\r\n        type: Boolean\r\n        // Excel stored booleans as numbers:\r\n        // `1` is `true` and `0` is `false`.\r\n        // Such numbers are parsed to booleans.\r\n      },\r\n      'COURSE TITLE': {\r\n        prop: 'title',\r\n        type: String\r\n      }\r\n    }\r\n  },\r\n  'CONTACT': {\r\n    prop: 'contact',\r\n    required: true,\r\n    parse(value) {\r\n      const number = parsePhoneNumber(value)\r\n      if (!number) {\r\n        throw new Error('invalid')\r\n      }\r\n      return number\r\n    }\r\n  }\r\n}\r\n\r\nreadXlsxFile(file, { schema }).then(({ rows, errors }) => {\r\n  // `errors` have shape `{ row, column, error, value }`.\r\n  errors.length === 0\r\n\r\n  rows === [{\r\n    date: new Date(2018, 2, 24),\r\n    numberOfStudents: 123,\r\n    course: {\r\n      isFree: true,\r\n      title: 'Chemistry'\r\n    },\r\n    contact: '+11234567890',\r\n  }]\r\n})\r\n```\r\n\r\nThere are also some additional exported `type`s:\r\n\r\n* `\"Integer\"` for parsing integer `Number`s.\r\n* `\"URL\"` for parsing URLs.\r\n* `\"Email\"` for parsing email addresses.\r\n\r\nA schema entry for a column can also have a `validate(value)` function for validating the parsed value. It must `throw` an `Error` if the value is invalid.\r\n\r\nA React component for displaying error info could look like this:\r\n\r\n```js\r\nimport { parseExcelDate } from 'read-excel-file'\r\n\r\nfunction ParseExcelError({ children: error }) {\r\n  // Human-readable value.\r\n  let value = error.value\r\n  if (error.type === Date) {\r\n    value = parseExcelDate(value).toString()\r\n  }\r\n  // Error summary.\r\n  return (\r\n    <div>\r\n      <code>\"{error.error}\"</code>\r\n      {' for value '}\r\n      <code>\"{value}\"</code>\r\n      {' in column '}\r\n      <code>\"{error.column}\"</code>\r\n      {error.type && ' of type '}\r\n      {error.type && <code>\"{error.type.name}\"</code>}\r\n      {' in row '}\r\n      <code>\"{error.row}\"</code>\r\n    </div>\r\n  )\r\n}\r\n```\r\n\r\nWhen using a `schema` there's also an optional `transformData(data)` parameter which can be used for the cases when the spreadsheet rows/columns aren't in the correct format. For example, the heading row may be missing, or there may be some purely presentational or empty rows. Example:\r\n\r\n```js\r\nreadXlsxFile(file, {\r\n  schema,\r\n  transformData(data) {\r\n    // Adds header row to the data.\r\n    return ['ID', 'NAME', ...].concat(data)\r\n    // Removes empty rows.\r\n    return data.filter(rows => row.filter(column => column !== null).length > 0)\r\n  }\r\n})\r\n```\r\n\r\n## Browser compatibility\r\n\r\nNode.js `*.xlxs` parser uses `xpath` and `xmldom` packages for XML parsing. The same packages could be used in a browser because [all modern browsers](https://caniuse.com/#search=domparser) (except IE 11) have native `DOMParser` built-in which could is used instead (meaning smaller footprint and better performance) but since Internet Explorer 11 support is still required the browser version doesn't use the native `DOMParser` and instead uses `xpath` and `xmldom` packages for XML parsing just like the Node.js version.\r\n\r\n## Advanced\r\n\r\nBy default it reads the first sheet in the document. If you have multiple sheets in your spreadsheet then pass either `sheet: number` (sheet index, starting from `1`) or `sheet: string` (sheet name) as part of the `options` argument (`options.sheet` is `1` by default):\r\n\r\n```js\r\nreadXlsxFile(file, { sheet: 2 }).then((data) => {\r\n  ...\r\n})\r\n```\r\n\r\n```js\r\nreadXlsxFile(file, { sheet: 'Sheet1' }).then((data) => {\r\n  ...\r\n})\r\n```\r\n\r\nTo get the list of sheets one can pass `getSheets: true` option:\r\n\r\n```js\r\nreadXlsxFile(file, { getSheets: true }).then((sheets) => {\r\n  // sheets === [{ name: 'Sheet1' }, { name: 'Sheet2' }]\r\n})\r\n```\r\n\r\n## References\r\n\r\nFor XML parsing [`xmldom`](https://github.com/jindw/xmldom) and [`xpath`](https://github.com/goto100/xpath) are used.\r\n\r\n## License\r\n\r\n[MIT](LICENSE)\r\n\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/catamphetamine/read-excel-file.git"
  },
  "scripts": {
    "browser-build": "better-npm-run browser-build",
    "build": "npm-run-all clean-for-build build-commonjs-modules build-es6-modules browser-build",
    "build-commonjs-modules": "better-npm-run build-commonjs-modules",
    "build-es6-modules": "better-npm-run build-es6-modules",
    "clean-for-build": "rimraf ./commonjs/**/* ./modules/**/*",
    "prepublish": "npm-run-all build test browser-build",
    "test": "mocha --require babel-core/register --colors --bail --reporter spec --require ./test/setup.js \"./{,!(node_modules|commonjs|modules)/**/}*.test.js\" --recursive",
    "test-coverage": "istanbul cover -x \"commonjs/**\" -x \"modules/**\" -x \"*.test.js\" node_modules/mocha/bin/_mocha -- --compilers js:babel-core/register --colors --reporter dot --require ./test/setup.js \"./{,!(node_modules|commonjs|modules)/**/}*.test.js\" --recursive",
    "test-travis": "istanbul cover -x \"commonjs/**\" -x \"modules/**\" -x \"*.test.js\" node_modules/mocha/bin/_mocha --report lcovonly -- --compilers js:babel-core/register --colors --reporter spec --require ./test/setup.js \"./{,!(node_modules|commonjs|modules)/**/}*.test.js\" --recursive"
  },
  "sideEffects": false,
  "version": "4.0.2"
}
